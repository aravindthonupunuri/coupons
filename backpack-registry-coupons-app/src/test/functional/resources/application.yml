micronaut:
  application:
    name: backpack-registry-coupons-app
  server:
    port: ${server-port:33000}
  metrics:
    binders:
      web:
        enabled: false # we are using our own binder via our custom micronaut-metrics lib

resilience4j:
  circuitbreaker:
    failure-rate-threshold: 50            # failure rate threshold in percentage (default: 50)
    wait-duration-secs-in-open-state: 10  # time cb waits before transitioning from open to half-open (default: 60s)
    sliding-window-type: TIME_BASED       # possible values TIME_BASED or COUNT_BASED (default: COUNT_BASED)
    sliding-window-size: 100               # seconds for TIME_BASED, request-count for COUNT_BASED (default: 100)
    minimum-number-of-calls: 10            # min calls required (per sliding window period) before cb calculates error rate (default: 10)
    permitted-number-of-calls-in-half-open-state: 10  # min calls permitted when circuit breaker is half open

jdbc-stmt:
  serverStatementTimeoutMillis: 250  # for server side statement timeout
  statementQueryTimeoutSeconds: 1    # for client side statement timeout
  fetchSize: 1000                                    # for controlling jdbc ResultSet fetch size globally (default 0)

jackson:
  property-naming-strategy: "SNAKE_CASE"

components:
  server:
    list-authorization-filter:
      enabled: false
    sanitizing-filter:
      enabled: false

#  ssl:
#    keystore:
#      location: /path/to/client.keystore.p12
#      password: secret
#    truststore:
#      location: /path/to/client.truststore.jks
#      password: secret
#      type: PKCS12
#  security:
#    protocol: ssl


api-key: "testkey"

filter:
  server:
    order:
      mdc-filter: 50
      lists-brave-tracing-server-filter: 100
      id2-groupvalidation-filter: 201
      sanitizing-filter: 300
  client:
    order:
      lists-brave-tracing-client-filter: 900
      metrics-filter: 850
      resilience-client-filter: 800
      oauth-filter: 701
      oauth-key-filter: 700

list:
  list-type: COUPONS
  max-count: 50
  max-pending-item-count: 100
  max-completed-items-count: 100
  pending-list-rolling-update: false
  default-list-title: "Registry Coupons"
  page-size: 2
  abandon-after-duration-in-days: 730 # It is two years duration
  features.two-carts: false
  features.dedupe: true
  features.sort-position: false
  features.fixed-default-list: true
  guest-notifications-max-tcin-count: 28

sic:
  batch-size: 3

mockfilter:
  paths: /carts/v4.*,/zipkin,/testserver/auth/oauth/v2/token,/storeItemPlacements,/ssa/cwlservice/api/v16/.*

tracing:
  zipkin:
    enabled: true
    excluded-paths: /health
    http:
      url: http://localhost:${server-port:32000}/zipkin

endpoints:
  health:
    sensitive: false

kafka:
  embedded:
    enabled: false
  consumers:
    lists-msg-bus-apiapp-consumer:
      key:
        deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value:
        deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
    lists-dlq-apiapp-consumer:
      key:
        deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value:
        deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
  producers:
    # default is a Jackson based JSON serializer for key/value
    lists-msg-bus-producer:
      retries: 3
      retry:
        backoff:
          ms: 1_000
      max:
        in:
          flight:
            requests:
              per:
                connection: 1
        block:
          ms: 2_000

msgbus:
  source: backpack-registry-coupons
  dlq-source: backpack-registry-coupons-dlq
  kafka:
    consumer:
      enabled: false
    producer:
      enabled: false
    dlqconsumer:
      enabled: false
    dlqproducer:
      enabled: false
    topic: lists-msg-bus
    consumer-group: lists-msg-bus-apiapp-consumer
    consumer-batch-size: 10
    dlq-topic: lists-dlq
    dlq-consumer-group: lists-dlq-apiapp-consumer
    dlq-event-retry-interval-secs: 1
    dlq-max-event-retry-count: 2
    dlq-consumer-batch-size: 10
